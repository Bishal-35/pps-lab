module half_addr(input a, b, output s, c);
  assign s = a^b;
  assign c = a & b;
endmodule

module full_adder(input a, b, cin, output s_out, c_out);
  wire s, c0, c1;
  half_addr HA1 (a, b, s, c0);
  half_addr HA2 (s, cin, s_out, c1);
  
  assign c_out = c0 | c1;
endmodule


//Testbench code

module test_full_adder;

  // Inputs for full adder
  reg a, b, cin;
  
  // Outputs from full adder
  wire s_out, c_out;

  // Instantiate the full adder module
  full_adder uut (
    .a(a), 
    .b(b), 
    .cin(cin), 
    .s_out(s_out), 
    .c_out(c_out)
  );

  // Apply test cases
  initial begin
    $display("a  b  cin | s_out c_out");
    $monitor("%b  %b   %b  |   %b     %b",a,b,cin,s_out,c_out);

    // Test case 1: a=0, b=0, cin=0
    a = 0; b = 0; cin = 0;
    #10;
    
    // Test case 2: a=0, b=0, cin=1
    a = 0; b = 0; cin = 1;
    #10;

    // Test case 3: a=0, b=1, cin=0
    a = 0; b = 1; cin = 0;
    #10;
    
    // Test case 4: a=0, b=1, cin=1
    a = 0; b = 1; cin = 1;
    #10;

    // Test case 5: a=1, b=0, cin=0
    a = 1; b = 0; cin = 0;
    #10;

    // Test case 6: a=1, b=0, cin=1
    a = 1; b = 0; cin = 1;
    #10;

    // Test case 7: a=1, b=1, cin=0
    a = 1; b = 1; cin = 0;
    #10;

    // Test case 8: a=1, b=1, cin=1
    a = 1; b = 1; cin = 1;
    #10;

    $finish;
  end
endmodule


//output

a=0, b=0, cin=0 | s_out=0, c_out=0
a=0, b=0, cin=1 | s_out=1, c_out=0
a=0, b=1, cin=0 | s_out=1, c_out=0
a=0, b=1, cin=1 | s_out=0, c_out=1
a=1, b=0, cin=0 | s_out=1, c_out=0
a=1, b=0, cin=1 | s_out=0, c_out=1
a=1, b=1, cin=0 | s_out=0, c_out=1
a=1, b=1, cin=1 | s_out=1, c_out=1
