// 3:8 Decoder Module


    module decoder3to8(input [2:0] in, output reg [7:0] out); 

  // Dataflow level assignment using 'assign' keyword
        assign out[0] = ~in[2] & ~in[1] & ~in[0]; // Output for '000'
        assign out[1] = ~in[2] & ~in[1] & in[0];  // Output for '001'
        assign out[2] = ~in[2] & in[1] & ~in[0]; // Output for '010'
        assign out[3] = ~in[2] & in[1] & in[0];  // Output for '011'
        assign out[4] = in[2] & ~in[1] & ~in[0]; // Output for '100'
        assign out[5] = in[2] & ~in[1] & in[0];  // Output for '101'
        assign out[6] = in[2] & in[1] & ~in[0]; // Output for '110'
        assign out[7] = in[2] & in[1] & in[0];  // Output for '111'
  
    endmodule


//Testbench code

// Testbench for 3:8 Decoder
module test_decoder3to8;
    reg [2:0] in;        // 3-bit input for testing
    wire [7:0] out;      // 8-bit output from decoder

    // Instantiate the 3:8 Decoder
    decoder3to8 uut (
        .in(in),
        .out(out)
    );

    initial begin
        $display("3:8 Decoder Testbench");
        $display("in  |  out");
        $monitor("%b | %b", in, out);

        // Apply all input combinations to test
        in = 3'b000; #10;
        in = 3'b001; #10;
        in = 3'b010; #10;
        in = 3'b011; #10;
        in = 3'b100; #10;
        in = 3'b101; #10;
        in = 3'b110; #10;
        in = 3'b111; #10;

        // Finish simulation
        $finish;
    end
endmodule




//output

// 3:8 Decoder Testbench
// in  | out
// 000 | 00000001
// 001 | 00000010
// 010 | 00000100
// 011 | 00001000
// 100 | 00010000
// 101 | 00100000
// 110 | 01000000
// 111 | 10000000
